@article{HU2024111900,
title = {Trace matrix optimization for fault localization},
journal = {Journal of Systems and Software},
volume = {208},
pages = {111900},
year = {2024},
issn = {0164-1212},
doi = {https://doi.org/10.1016/j.jss.2023.111900},
url = {https://www.sciencedirect.com/science/article/pii/S0164121223002959},
author = {Jian Hu},
keywords = {Fault localization, Coincidental correctness, Imbalanced data, Data augmentation},
abstract = {Fault localization (FL) techniques gather trace information as input data and analyze it to identify the relationship between program statements and failures. Therefore, the input trace matrix is essential for fault localization. However, the current trace matrix faces two main challenges. Firstly, the occurrences of coincidental correctness (CC), which refer to the execution of faulty statements that lead to correct program output, adversely impact the effectiveness of FL. Secondly, the significant disparity in the number of failing and passing test cases poses a data imbalance problem for fault localization. To overcome these issues, we propose TRAIN: a Two-stage tRace mAtrix optImizatioN method for fault localization. In the first stage of optimization, TRAIN leverages an improved cluster analysis to identify and exclude the CC tests to optimize the trace matrix. Subsequently, in the second stage, TRAIN utilizes data augmentation to enhance the failing test cases to further balance the trace matrix. The optimized trace matrix is then used as input data in the FL pipeline to locate the faulty statements. Through extensive experiments conducted on 330 faulty versions of nine large-sized programs (obtained from Defects4J, ManyBugs, and SIR) using six state-of-the-art FL methods, TRAIN demonstrates remarkable improvements in FL effectiveness.}
}
@inproceedings{dutta2021msfl,
	title={Msfl: A model for fault localization using mutation-spectra technique},
	author={Dutta, Arpita and Godboley, Sangharatna},
	booktitle={Lean and Agile Software Development: 5th International Conference, LASD 2021, Virtual Event, January 23, 2021, Proceedings 5},
	pages={156--173},
	year={2021},
	organization={Springer}
}
@article{yanimproving,
	title={Improving fault localization via weighted execution graph and graph attention network},
	author={Yan, Yue and Jiang, Shujuan and Zhang, Yanmei and Zhang, Cheng},
	journal={Journal of Software: Evolution and Process},
	pages={e2619},
	publisher={Wiley Online Library}
}
@inproceedings{motwani2023better,
	title={Better automatic program repair by using bug reports and tests together},
	author={Motwani, Manish and Brun, Yuriy},
	booktitle={2023 IEEE/ACM 45th International Conference on Software Engineering (ICSE)},
	pages={1225--1237},
	year={2023},
	organization={IEEE}
}
@article{zou2019empirical,
	title={An empirical study of fault localization families and their combinations},
	author={Zou, Daming and Liang, Jingjing and Xiong, Yingfei and Ernst, Michael D and Zhang, Lu},
	journal={IEEE Transactions on Software Engineering},
	volume={47},
	number={2},
	pages={332--347},
	year={2019},
	publisher={IEEE}
}
@inproceedings{li2019deepfl,
	title={Deepfl: Integrating multiple fault diagnosis dimensions for deep fault localization},
	author={Li, Xia and Li, Wei and Zhang, Yuqun and Zhang, Lingming},
	booktitle={Proceedings of the 28th ACM SIGSOFT international symposium on software testing and analysis},
	pages={169--180},
	year={2019}
}
@inproceedings{sohn2017fluccs,
	title={Fluccs: Using code and change metrics to improve fault localization},
	author={Sohn, Jeongju and Yoo, Shin},
	booktitle={Proceedings of the 26th ACM SIGSOFT International Symposium on Software Testing and Analysis},
	pages={273--283},
	year={2017}
}
@inproceedings{adian2023LLMAO,
	title={Large Language Models for Test-Free Fault Localization},
	author={Aidan Z.H. Yang,Claire Le Goues,Ruben Martins,Vincent J. Hellendoorn},
	year={2023}
}




